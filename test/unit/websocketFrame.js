#!/usr/bin/env node

import ext_test from "tape";
import ext_bufferEqual from "buffer-equal";
import { WebSocketFrame as WebSocketFrame_WebSocketFrame } from "../../lib/WebSocketFrame";

import {
  bufferAllocUnsafe as libutils_bufferAllocUnsafe,
  bufferFromString as libutils_bufferFromString,
} from "../../lib/utils";

var bufferAllocUnsafe = libutils_bufferAllocUnsafe;
var bufferFromString = libutils_bufferFromString;


ext_test('Serializing a WebSocket Frame with no data', function(t) {
  t.plan(2);
  
  // WebSocketFrame uses a per-connection buffer for the mask bytes
  // and the frame header to avoid allocating tons of small chunks of RAM.
  var maskBytesBuffer = bufferAllocUnsafe(4);
  var frameHeaderBuffer = bufferAllocUnsafe(10);
  
  var frameBytes;
  var frame = new WebSocketFrame_WebSocketFrame(maskBytesBuffer, frameHeaderBuffer, {});
  frame.fin = true;
  frame.mask = true;
  frame.opcode = 0x09; // WebSocketFrame.PING
  t.doesNotThrow(
    function() { frameBytes = frame.toBuffer(true); },
    'should not throw an error'
  );
  
  t.assert(
    ext_bufferEqual
      (frameBytes, bufferFromString('898000000000', 'hex')),
    'Generated bytes should be correct'
  );
  
  t.end();
});
